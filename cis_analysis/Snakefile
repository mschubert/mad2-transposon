configfile: "../config.yaml"

subworkflow cis:
    workdir: "../data/cis"

subworkflow aneup:
    workdir: "../ploidy_compare"

subworkflow imfusion:
    workdir: "../data/rnaseq_imfusion"

rule all:
    input:
        "plot_tiles.pdf", "poisson.pdf", "ext_gene.pdf",
        expand("bionet_{int}.pdf", int=['omnipath']), # int=DLBCL: ggraph#247
        expand("ins/{ins}.pdf", ins=config['ins_plots']),
        expand("ext_epi/{feature}.pdf", feature=['enhancer',
            'TF_binding_site', 'open_chromatin_region', 'CTCF_binding_site'])

rule plot_ins:
    input:
        rscript = "plot_ins.r",
        exons = imfusion("exon_counts.txt"),
        ctgs = imfusion("merged_ctgs.txt"),
        rna_ins = imfusion("insertions.txt"),
        dna_ins = "analysis_set.rds",
        meta = aneup("analysis_set.rds")
    output:
        plot = "ins/{gene}.pdf"
    resources:
        mem = 10000
    shell:
        "Rscript {input.rscript}"
            " --exons {input.exons}"
            " --ctgs {input.ctgs}"
            " --rna_ins {input.rna_ins}"
            " --dna_ins {input.dna_ins}"
            " --meta {input.meta}"
            " --gene {wildcards.gene}"
            " --plotfile {output.plot}"

rule plot_tiles:
    input:
        rscript = "plot_tiles.r",
        aneup = "../ploidy_compare/analysis_set.rds",
        ins_dna = "poisson.rds",
        ins_rna = imfusion("insertions.txt"),
        assocs_dna = "ext_gene.rds",
        assocs_rna = imfusion("merged_ctgs.txt"),
        exons = imfusion("exon_counts.txt")
    output:
        plot = "plot_tiles.pdf"
    shell:
        "Rscript {input.rscript}"
            " --aneup {input.aneup}"
            " --ins_dna {input.ins_dna}"
            " --ins_rna {input.ins_rna}"
            " --assocs_dna {input.assocs_dna}"
            " --assocs_rna {input.assocs_rna}"
            " --exons {input.exons}"
            " --plotfile {output.plot}"

rule bionet:
    input:
        rscript = "bionet.r",
        cis = "poisson.rds",
        aneup = "ext_gene.rds"
    output:
        outfile = "bionet_{interactome}.rds",
        plotfile = "bionet_{interactome}.pdf"
    shell:
        "Rscript {input.rscript}"
            " --cis {input.cis}"
            " --aneup {input.aneup}"
            " --interactome {wildcards.interactome}"
            " --outfile {output.outfile}"
            " --plotfile {output.plotfile}"

rule ext_assocs:
    input:
        rscript = "ext_gene.r",
        poisson = "poisson.rds",
        meta = aneup("analysis_set.rds")
    output:
        result = "ext_gene.rds",
        plot = "ext_gene.pdf"
    shell:
        "Rscript {input.rscript}"
            " --meta {input.meta}"
            " --poisson {input.poisson}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule poisson_gene:
    input:
        rscript = "poisson.r",
        aset = "analysis_set.rds"
    output:
        result = "poisson.rds",
        plot = "poisson.pdf"
    resources:
        mem = 4096
    shell:
        "Rscript {input.rscript}"
            " --infile {input.aset}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule ext_assocs_epi:
    input:
        rscript = "ext_epi.r",
        poisson = "poisson_epi/{feature}.rds",
        meta = aneup("analysis_set.rds")
    output:
        result = "ext_epi/{feature}.rds",
        plot = "ext_epi/{feature}.pdf"
    shell:
        "Rscript {input.rscript}"
            " --meta {input.meta}"
            " --poisson {input.poisson}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule poisson_epi:
    input:
        rscript = "poisson_epi.r",
        aset = "analysis_set.rds",
        epigenome = "../data/rnaseq/epigenome_ensembl102.tsv"
    output:
        result = "poisson_epi/{feature}.rds",
        plot = "poisson_epi/{feature}.pdf"
    resources:
        mem = 4096
    shell:
        "Rscript {input.rscript}"
            " --infile {input.aset}"
            " --epigenome {input.epigenome}"
            " --feature {wildcards.feature}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule cimpl:
    input:
        rscript = "kernel_cimpl.r",
        aset = "analysis_set.rds"
    output:
        result = "kernel_cimpl.rds"
    shell:
        "Rscript {input.rscript} --infile {input.aset} --outfile {output.result}"

rule analysis_set:
    input:
        rscript = "analysis_set.r",
        sheet = "analysis_set.yaml",
        data = cis("cis_per_tumor.rds")
    output:
        aset = "analysis_set.rds"
    shell:
        "Rscript {input.rscript} --infile {input.data} --sheet {input.sheet} --outfile {output.aset}"
