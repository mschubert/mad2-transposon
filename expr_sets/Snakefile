configfile: "../config.yaml"

subworkflow expr:
    workdir: "../expr_diff"

subworkflow genesets:
    workdir: "../data/genesets"

subworkflow viper:
    workdir: "../expr_cor"

dset = {
    'mile' : 'eset_MILE.RData',
    'mad2pb' : 'eset_Mad2PB.RData'
}

dset_org = {
    'mile' : 'human',
    'mad2pb' : 'mouse'
}

rule all:
    input:
        expand("{kind}_{dset}.RData", dset=dset.keys(),
                kind=config['expr_sets-highlight']),
        "set_overlap.pdf"

rule assemble:
    input:
        rscript = "assemble.r",
        dset = lambda wc: expr(dset[wc.dset]),
        highlight = lambda wc: wc.kind + ".yaml",
        viper = viper("viper-{dset}.RData"),
        sets = expand("gsva_{{dset}}/{set}.RData", set=config['genesets'])
    output:
        outfile = "{kind}_{dset}.RData",
        plotfile = "{kind}_{dset}.pdf"
    wildcard_constraints:
        highlight = ".*(^_merge)\\.yaml"
    shell:
        "Rscript {input.rscript}"
            " --dset {input.dset}"
            " --highlight {input.highlight}"
            " --outfile {output.outfile}"
            " --plotfile {output.plotfile}"
            " --viper {input.viper}"
            " {input.sets}"

rule merge:
    input:
        rscript = "merge.r",
        genes = "genes_{dset}.RData",
        sets = "sets_{dset}.RData",
        tfs = "tfs_{dset}.RData",
        merge = "{merge}_merge.yaml"
    output:
        outfile = "{merge}_{dset}.RData"
    wildcard_constraints:
        highlight = ".*_merge\\.yaml"
    shell:
        "Rscript {input.rscript}"
            " --genes {input.genes}"
            " --sets {input.sets}"
            " --tfs {input.tfs}"
            " --outfile {output.outfile}"

rule set_overlap:
    input:
        rscript = "set_overlap.r",
        select = "sets.yaml",
        genesets = genesets([genesets("mouse/" + x + ".RData") for x in config['genesets']])
    output:
        plot = "set_overlap.pdf"
    shell:
        "Rscript {input.rscript}"
            " --highlight {input.select}"
            " --plotfile {output.plot}"
            " {input.genesets}"

rule gsva_set:
    input:
        rscript = "gsva_{dset}.r",
        geneset = lambda wc: genesets(dset_org[wc.dset] + "/" + wc.set + ".RData"),
        dset = lambda wc: expr(dset[wc.dset])
    output:
        scores = "gsva_{dset}/{set}.RData"
    resources:
        mem = 10240,
        walltime = 120
    shell:
        "Rscript {input.rscript}"
            " --dset {input.dset}"
            " --geneset {input.geneset}"
            " --outfile {output.scores}"
