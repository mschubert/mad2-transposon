import yaml
import os.path

def load_yaml(fname):
    sset = yaml.load(open(fname))
    sset['samples'] = { k:[os.path.join(sset['directory'], vi) for vi in v]
            for k,v in sset['samples'].items() }
    return sset

ssets = ['Mad2+PB_batch1', 'Mad2+PB_batch2', 'Mad2+PB_batch3',
         'Mad2+p53_batch1', 'Mad2+p53_batch2']
samples = { sset:load_yaml(sset+".yaml") for sset in ssets }

rule all:
    input:
        expand("merge_rnaseq.RData", sset=ssets),
        expand("mixcr_{sset}.tsv", sset=ssets)

rule merge_rnaseq:
    input:
        rscript = "merge_rnaseq.r",
        samples = expand("{sset}.tsv", sset=ssets)
    output:
        expr = "merge_rnaseq.RData"
    shell:
        "Rscript {input.rscript}"
            " -o {output.expr}"
            " {input.samples}"

rule star_genome:
    input:
        fasta = "../genome/Mus_musculus.GRCm38.dna_rm.toplevel.fa",
        gtf = "../genome/Mus_musculus.GRCm38.92.gtf"
    output:
        genome = "STAR_GRCm38_ens92"
    resources:
        mem = 50000,
        walltime = 120
    shell:
        "STAR --runMode genomeGenerate"
            " --genomeFastaFiles {input.fasta}"
            " --sjdbGTFfile {input.gtf}"
            " --limitGenomeGenerateRAM {resources.mem}000000"
            " --genomeDir {output.genome}"

rule align:
    input:
        genome = "STAR_GRCm38_ens92",
        fastq = lambda wc: samples[wc.set]['samples'][wc.sample]
    output:
        bam = "aligned/{set}/{sample}.bam"
    resources:
        mem = 30000,
        walltime = 120
    shell:
        "STAR --runMode alignReads"
            " --genomeLoad LoadAndKeep"
            " --readFilesCommand zcat"
            " --genomeDir {input.genome}"
            " --readFilesIn {input.fastq}"
            " --outSAMtype BAM Unsorted"
            " --outStd BAM_Unsorted"
            " --outFileNamePrefix aligned/{wildcards.set}/{wildcards.sample}"
            " > {output.bam}"

rule count:
    input:
        gtf = "../genome/Mus_musculus.GRCm38.92.gtf",
        samples = "{set}.yaml",
        bams = lambda wc: expand("aligned/{sset}/{samples}.bam",
                sset=wc.set, samples=samples[wc.set]['samples'].keys())
    output:
        counts = "{set}.tsv"
    resources:
        mem = 2000,
        walltime = 120
    shell:
        "featureCounts"
            " -a {input.gtf}"
            " -o {output.counts}"
            " {input.bams}"

rule mixcr:
    """
    http://mixcr.readthedocs.io/en/latest/rnaseq.html
    """
    input:
        fastq = lambda wc: samples[wc.set]['samples'][wc.sample]
    output:
        vdjca = "mixcr/{set}/{sample}.vdjca",
        align_log = "mixcr/{set}/{sample}_align.log",
        contigs1 = "mixcr/{set}/{sample}_contigs1.vdjca",
        contigs2 = "mixcr/{set}/{sample}_contigs2.vdjca",
        assemble_log = "mixcr/{set}/{sample}_assemble.log",
        clones = "mixcr/{set}/{sample}_clones.clns",
        outfile = "mixcr/{set}/{sample}.txt"
    resources:
        mem = 20000,
        walltime = 180
    shell:
        """
        mixcr align --species mmu --parameters rna-seq --threads 1 \
            -OallowPartialAlignments=true \
            --report {output.align_log} {input.fastq} {output.vdjca}
        mixcr assemblePartial {output.vdjca} {output.contigs1}
        mixcr assemblePartial {output.contigs1} {output.contigs2}
        mixcr assemble --threads 1 --report {output.assemble_log} \
            {output.contigs2} {output.clones}
        mixcr exportClones {output.clones} {output.outfile}
        """

rule mixcr_combine:
    input:
        rscript = "mixcr.r",
        samples = "{sset}.yaml",
        mixcr = lambda wc: expand("mixcr/{sset}/{sample}.txt",
                sset=wc.sset, sample=samples[wc.sset]['samples'].keys())
    output:
        tsv = "mixcr_{sset}.tsv"
    shell:
        "Rscript {input.rscript} -o {output.tsv} {input.mixcr}"
