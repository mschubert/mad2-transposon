configfile: "../config.yaml"

import yaml
with open("de-detail_Mad2PB.yaml") as f:
    detail = yaml.safe_load(f)

subworkflow rnaseq:
    workdir: "../data/rnaseq"

subworkflow mile:
    workdir: "../data/arrayexpress"

subworkflow ploidy:
    workdir: "../ploidy_compare"

subworkflow cis:
    workdir: "../cis_analysis"

subworkflow sets:
    workdir: "../data/genesets"

subworkflow net:
    workdir: "../data/networks"

esets = ['Mad2PB'] #, 'Mad2PB+EtsErg', 'Mad2PB+noCopyCor', 'Mad2PB+multiCIS', 'MILE']

rule all:
    input:
        expand("de_{eset}.pdf", eset=esets),
        expand("de_{eset}/{set}.pdf", eset=esets, set=config['genesets']),
        expand("de_{eset}-detail/{key}.pdf", eset=esets, key=detail.keys()),
#        expand("{ins_type}_plots/{ins}.pdf", ins=config['ins_plots'],
#                ins_type=['ins', 'ins+aneup', 'ins-over-expr', 'ins-under-expr'])

rule diff_expr:
    input:
        rscript = "de_{eset}.r",
        eset = "eset_{eset}.rds",
        config = "../config.yaml",
        network = net("aracne_E-GEOD-13159.rds")
    output:
        outfile = "de_{eset}.rds",
        plotfile = "de_{eset}.pdf"
    resources:
        mem = 4096,
        walltime = 120
    shell:
        "Rscript {input.rscript}"
            " --eset {input.eset}"
            " --config {input.config}"
            " --network {input.network}"
            " --outfile {output.outfile}"
            " --plotfile {output.plotfile}"

rule set_expr:
    input:
        rscript = "de-set.r",
        config = "../config.yaml",
        eset = "eset_{eset}.rds",
        diff_expr = "de_{eset}.rds",
        setfile = sets("mouse/{set}.rds")
    output:
        outfile = "de_{eset}/{set}.rds",
        plotfile = "de_{eset}/{set}.pdf"
    shell:
        "Rscript {input.rscript}"
            " --config {input.config}"
            " --eset {input.eset}"
            " --diff_expr {input.diff_expr}"
            " --setfile {input.setfile}"
            " --outfile {output.outfile}"
            " --plotfile {output.plotfile}"

rule set_detail:
    input:
        rscript = "de-detail.r",
        config = "de-detail_{eset}.yaml",
        de_obj = "de_{eset}.rds",
    output:
        plotfile = "de_{eset}-detail/{key}.pdf"
    shell:
        "Rscript {input.rscript}"
            " --config {input.config}"
            " --de_obj {input.de_obj}"
            " --key {wildcards.key}"
            " --plotfile {output.plotfile}"

rule eset_Mad2PBEtsErg:
    input:
        rscript = "eset_Mad2PB+EtsErg.r",
        eset = "eset_Mad2PB.rds"
    output:
        result = "eset_Mad2PB+EtsErg.rds",
        plot = "eset_Mad2PB+EtsErg.pdf"
    shell:
        "Rscript {input.rscript}"
            " --eset {input.eset}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule eset_Mad2PBmultiCIS:
    input:
        rscript = "eset_Mad2PB+multiCIS.r",
        eset = "eset_Mad2PB.rds",
        cis = cis("poisson.rds")
    output:
        result = "eset_Mad2PB+multiCIS.rds",
        plot = "eset_Mad2PB+multiCIS.pdf"
    shell:
        "Rscript {input.rscript}"
            " --eset {input.eset}"
            " --cis {input.cis}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule eset_Mad2PB:
    input:
        rscript = "eset_Mad2PB.r",
        copies = ploidy("gene_copies.rds"),
        meta = ploidy("analysis_set.rds")
    output:
        result = "eset_Mad2PB.rds",
        plot = "eset_Mad2PB.pdf"
    shell:
        "Rscript {input.rscript}"
            " --copies {input.copies}"
            " --meta {input.meta}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule eset_Mad2PBnoCopyCor:
    input:
        rscript = "eset_Mad2PB+noCopyCor.r",
        meta = ploidy("analysis_set.rds")
    output:
        result = "eset_Mad2PB+noCopyCor.rds",
        plot = "eset_Mad2PB+noCopyCor.pdf"
    shell:
        "Rscript {input.rscript}"
            " --meta {input.meta}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule eset_MILE:
    input:
        rscript = "eset_MILE.r",
        mile = mile("E-GEOD-13159.rds")
    output:
        result = "eset_MILE.rds",
        plot = "eset_MILE.pdf"
    shell:
        "Rscript {input.rscript}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"

rule de_ins:
    input:
        rscript = "{ins_type}.r",
        eset = "eset_Mad2PB.rds",
        config = "../config.yaml",
        cis = cis("poisson.rds"),
        network = net("aracne_E-GEOD-13159.rds"),
        sets = sets(expand("mouse/{sets}.rds", sets=config['genesets']))
    output:
        result = "{ins_type}/{ins}.rds",
        plot = "{ins_type}_plots/{ins}.pdf"
    resources:
        mem = 5000,
        walltime = 120
    shell:
        "Rscript {input.rscript}"
            " --eset {input.eset}"
            " --config {input.config}"
            " --cis {input.cis}"
            " --ins {wildcards.ins}"
            " --network {input.network}"
            " --outfile {output.result}"
            " --plotfile {output.plot}"
            " {input.sets}"
